#include "../catch.hpp"
#include "solution.hpp"

struct TestCase {
    vector<int> input;
    int target;
    int expected;
};

TEST_CASE("search in rotated sorted array")
{
    Solution s;

    vector<TestCase> cases{
        // empty
        {{}, 1, -1},
        // single
        {{1}, 0, -1},
        {{1}, 1, 0},
        // rotated
        {{4, 5, 6, 7, 0, 1, 2}, 0, 4},
        {{4, 5, 6, 7, 0, 1, 2}, 1, 5},
        {{4, 5, 6, 7, 0, 1, 2}, 2, 6},
        {{4, 5, 6, 7, 0, 1, 2}, 3, -1},
        {{4, 5, 6, 7, 0, 1, 2}, 4, 0},
        {{4, 5, 6, 7, 0, 1, 2}, 5, 1},
        {{4, 5, 6, 7, 0, 1, 2}, 6, 2},
        {{4, 5, 6, 7, 0, 1, 2}, 7, 3},
        {{4, 5, 6, 7, 0, 1, 2}, 8, -1},
        // no rotated
        {{1, 2, 3}, 0, -1},
        {{1, 2, 3}, 1, 0},
        {{1, 2, 3}, 2, 1},
        {{1, 2, 3}, 3, 2},
        {{1, 2, 3}, 4, -1},
        // rotated 2
        {{11, 13, 15, 2, 3, 5, 7, 8}, 1, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 2, 3},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 3, 4},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 4, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 5, 5},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 6, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 7, 6},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 8, 7},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 9, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 10, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 11, 0},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 12, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 13, 1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 14, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 15, 2},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 16, -1},
        {{11, 13, 15, 2, 3, 5, 7, 8}, 17, -1},
        // rotated 3
        {{3, 5, 1}, 0, -1},
        {{3, 5, 1}, 1, 2},
        {{3, 5, 1}, 2, -1},
        {{3, 5, 1}, 3, 0},
        {{3, 5, 1}, 4, -1},
        {{3, 5, 1}, 5, 1},
        {{3, 5, 1}, 6, -1},
    };

    for (auto& c : cases) {
        auto result = s.search(c.input, c.target);
        REQUIRE(result == c.expected);
    }
}